package de.blutmondgilde.changeloggenerator.model;

import de.blutmondgilde.changeloggenerator.utils.CurseForgeAPI;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class ModpackChanges {

    private final List<ModFile> newMods = new ArrayList<>();

    private final List<ModFile> changedMods = new ArrayList<>();

    private final List<ModFile> removedMods = new ArrayList<>();
    private final CurseForgeAPI api;
    private String modLoaderUpdateString = "";
    private final CFModLoader modLoader;

    public ModpackChanges(ModpackFile oldPack, ModpackFile newPack, String token) {
        this.api = new CurseForgeAPI(token);
        List<ModFile> oldMods = new ArrayList<>(Arrays.asList(oldPack.getFiles()));
        List<ModFile> newMods = Arrays.asList(newPack.getFiles());

        System.out.println("Loading Modloader information...");
        this.modLoader = api.getModLoader(newPack.getMinecraft());
        if (!newPack.getMinecraft().getModLoaders()[0].getId().equals(oldPack.getMinecraft().getModLoaders()[0].getId())) {
            String oldForgeVersion = api.getModLoader(oldPack.getMinecraft()).getForgeVersion();
            String newForgeVersion = modLoader.getForgeVersion();
            modLoaderUpdateString = String.format("%s â†’ %s", oldForgeVersion, newForgeVersion);
        }


        newMods.forEach(mod -> {
            Optional<ModFile> oldModData = oldMods.stream()
                .filter(modFile -> modFile.getProjectID() == mod.getProjectID())
                .findFirst();
            if (oldModData.isPresent()) {
                if (oldModData.get().getFileID() != mod.getFileID()) {
                    this.changedMods.add(mod); //Add changed
                }
                oldMods.remove(oldModData.get());
            } else {
                this.newMods.add(mod); //Add new
            }
        });

        removedMods.addAll(oldMods); //Add removed
    }

    public String getChanges() {
        StringBuilder builder = new StringBuilder();
        if (!modLoaderUpdateString.isEmpty()) {
            builder.append(String.format("# %s Update:\n", this.modLoader.getName()))
                .append(modLoaderUpdateString)
                .append("\n\n");
        }

        builder.append("# New Mods:\n");
        if (newMods.isEmpty()) {
            builder.append("## None\n\n");
        } else {
            newMods.forEach(modFile -> {
                CFMod mod = this.api.getModInformation(modFile);
                builder.append("## [").append(mod.getName())
                    .append("](https://www.curseforge.com/minecraft/mc-mods/")
                    .append(mod.getSlug())
                    .append(")\n\n");
            });
        }

        builder.append("\n# Changed Mods:\n");
        if (changedMods.isEmpty()) {
            builder.append("## None\n\n");
        } else {
            changedMods.forEach(file -> {
                CFMod mod = this.api.getModInformation(file);
                builder.append("## [").append(mod.getName()).append("](https://www.curseforge.com/minecraft/mc-mods/").append(mod.getSlug()).append(")\n");
                builder.append(this.api.getModChangeLog(file)).append("\n\n");
            });
        }

        builder.append("\n# Removed Mods:\n");
        if (removedMods.isEmpty()) {
            builder.append("## None\n\n");
        } else {
            removedMods.forEach(modFile -> {
                CFMod mod = this.api.getModInformation(modFile);
                builder.append("## [").append(mod.getName())
                    .append("](https://www.curseforge.com/minecraft/mc-mods/")
                    .append(mod.getSlug())
                    .append(")\n\n");
            });
        }

        builder.append("\n\n").append("Changelog generated by [CF-Changelog-Generator](https://github.com/Charismara/CF-Changelog-Generator)");
        return builder.toString();
    }
}
